-- =====================================================
-- SDB Nepal Database Initialization Script
-- Supports direct file uploads to Supabase Storage
-- =====================================================

-- Enable UUID generation extension
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

-- =====================================================
-- STORAGE BUCKETS (Create these in Supabase Dashboard)
-- =====================================================
-- 
-- In Supabase Dashboard > Storage, create these buckets:
-- 1. 'hero-images' - for hero carousel images
-- 2. 'event-images' - for event images
-- 3. 'project-images' - for project images
-- 4. 'blog-images' - for blog post images
-- 5. 'gallery' - for general gallery images/videos
-- 6. 'library' - for documents, PDFs, audio, video files
-- 7. 'certificates' - for generated certificates
-- 8. 'user-documents' - for user uploaded documents
-- 9. 'avatars' - for user profile pictures
-- 10. 'temp' - for temporary file uploads

-- =====================================================
-- FILE MANAGEMENT TABLES
-- =====================================================

-- Media files table (centralized file management)
CREATE TABLE IF NOT EXISTS media_files (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    file_name text NOT NULL,
    original_name text NOT NULL,
    file_path text NOT NULL, -- Supabase storage path
    bucket_name text NOT NULL, -- Supabase storage bucket
    file_size bigint NOT NULL, -- in bytes
    mime_type text NOT NULL,
    file_type text NOT NULL, -- 'image', 'video', 'audio', 'document', 'pdf', etc.
    width integer, -- for images/videos
    height integer, -- for images/videos
    duration integer, -- for audio/video in seconds
    thumbnail_path text, -- for videos/audio files
    alt_text text, -- for accessibility
    description text,
    tags text[], -- for categorization
    is_public boolean DEFAULT true,
    is_active boolean DEFAULT true,
    uploaded_by uuid, -- user/admin who uploaded
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- File usage tracking (which files are used where)
CREATE TABLE IF NOT EXISTS file_usage (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    file_id uuid REFERENCES media_files(id) ON DELETE CASCADE,
    entity_type text NOT NULL, -- 'hero_slide', 'event', 'project', 'blog', 'gallery', 'library', 'certificate'
    entity_id uuid NOT NULL, -- ID of the entity using this file
    usage_type text NOT NULL, -- 'primary', 'thumbnail', 'gallery', 'attachment'
    order_index integer DEFAULT 0,
    created_at timestamptz DEFAULT now()
);

-- =====================================================
-- CONTENT TABLES (Updated for file management)
-- =====================================================

-- Hero Slides table
CREATE TABLE IF NOT EXISTS hero_slides (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text NOT NULL,
    cta_text text NOT NULL,
    cta_url text NOT NULL,
    order_index integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Events table
CREATE TABLE IF NOT EXISTS events (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text NOT NULL,
    event_date date NOT NULL,
    start_time time NOT NULL,
    end_time time NOT NULL,
    location text NOT NULL,
    category text NOT NULL,
    is_paid boolean DEFAULT false,
    price numeric,
    max_participants integer,
    current_participants integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Projects table
CREATE TABLE IF NOT EXISTS projects (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text NOT NULL,
    goal_amount numeric NOT NULL,
    raised_amount numeric DEFAULT 0,
    currency text DEFAULT 'NPR',
    status text NOT NULL,
    start_date date NOT NULL,
    end_date date,
    location text,
    beneficiaries integer,
    is_active boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Blogs table
CREATE TABLE IF NOT EXISTS blogs (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    excerpt text NOT NULL,
    content text NOT NULL,
    author text NOT NULL,
    category text NOT NULL,
    published boolean DEFAULT false,
    published_at timestamptz,
    author_id uuid,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Library table
CREATE TABLE IF NOT EXISTS library (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text NOT NULL,
    category text NOT NULL,
    language text DEFAULT 'Nepali',
    is_free boolean DEFAULT true,
    is_active boolean DEFAULT true,
    download_count integer DEFAULT 0,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Gallery table
CREATE TABLE IF NOT EXISTS gallery (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    title text NOT NULL,
    description text,
    category text,
    is_active boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- =====================================================
-- USER MANAGEMENT TABLES
-- =====================================================

-- Membership table
CREATE TABLE IF NOT EXISTS membership (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    serial_number text UNIQUE NOT NULL,
    full_name text NOT NULL,
    email text UNIQUE NOT NULL,
    phone text NOT NULL,
    address text NOT NULL,
    date_of_birth date NOT NULL,
    membership_type text NOT NULL,
    start_date date NOT NULL,
    end_date date,
    is_active boolean DEFAULT true,
    referral_code text,
    status text DEFAULT 'pending',
    payment_amount numeric,
    payment_method text,
    transaction_id text,
    certificate_number text,
    approved_by text,
    approved_date timestamptz,
    rejected_by text,
    rejected_date timestamptz,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Event Registrations table
CREATE TABLE IF NOT EXISTS event_registrations (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    participant_name text NOT NULL,
    participant_email text NOT NULL,
    participant_phone text NOT NULL,
    event_title text NOT NULL,
    event_date date NOT NULL,
    registration_fee numeric DEFAULT 0,
    payment_method text,
    transaction_id text,
    status text DEFAULT 'pending',
    special_requests text,
    approved_by text,
    approved_date timestamptz,
    rejected_by text,
    rejected_date timestamptz,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Donations table
CREATE TABLE IF NOT EXISTS donations (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    donor_name text NOT NULL,
    donor_email text,
    donor_phone text,
    amount numeric NOT NULL,
    currency text DEFAULT 'NPR',
    project_id uuid REFERENCES projects(id),
    purpose text,
    payment_method text NOT NULL,
    transaction_id text,
    receipt_number text UNIQUE NOT NULL,
    status text DEFAULT 'pending',
    receipt_requested boolean DEFAULT true,
    approved_by text,
    approved_date timestamptz,
    rejected_by text,
    rejected_date timestamptz,
    created_at timestamptz DEFAULT now()
);

-- =====================================================
-- CERTIFICATE AND DOCUMENT TABLES
-- =====================================================

-- Certificates table
CREATE TABLE IF NOT EXISTS certificates (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    serial_number text UNIQUE NOT NULL,
    recipient_name text NOT NULL,
    recipient_email text NOT NULL,
    certificate_type text NOT NULL,
    issued_date date NOT NULL,
    verification_code text,
    status text DEFAULT 'valid',
    created_at timestamptz DEFAULT now()
);

-- Receipts table
CREATE TABLE IF NOT EXISTS receipts (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    receipt_number text UNIQUE NOT NULL,
    donor_name text NOT NULL,
    amount numeric NOT NULL,
    currency text DEFAULT 'NPR',
    purpose text,
    status text DEFAULT 'valid',
    verification_code text,
    created_at timestamptz DEFAULT now()
);

-- =====================================================
-- CONTENT MANAGEMENT TABLES
-- =====================================================

-- FAQs table
CREATE TABLE IF NOT EXISTS faqs (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    question text NOT NULL,
    answer text NOT NULL,
    page_id text NOT NULL,
    order_index integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- Settings table
CREATE TABLE IF NOT EXISTS settings (
    id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    key text UNIQUE NOT NULL,
    value text NOT NULL,
    description text,
    created_at timestamptz DEFAULT now(),
    updated_at timestamptz DEFAULT now()
);

-- =====================================================
-- INDEXES FOR PERFORMANCE
-- =====================================================

-- Media files indexes
CREATE INDEX IF NOT EXISTS idx_media_files_bucket ON media_files(bucket_name);
CREATE INDEX IF NOT EXISTS idx_media_files_type ON media_files(file_type);
CREATE INDEX IF NOT EXISTS idx_media_files_active ON media_files(is_active);
CREATE INDEX IF NOT EXISTS idx_media_files_uploaded_by ON media_files(uploaded_by);

-- File usage indexes
CREATE INDEX IF NOT EXISTS idx_file_usage_entity ON file_usage(entity_type, entity_id);
CREATE INDEX IF NOT EXISTS idx_file_usage_file ON file_usage(file_id);

-- Content indexes
CREATE INDEX IF NOT EXISTS idx_hero_slides_order ON hero_slides(order_index);
CREATE INDEX IF NOT EXISTS idx_hero_slides_active ON hero_slides(is_active);
CREATE INDEX IF NOT EXISTS idx_events_active ON events(is_active);
CREATE INDEX IF NOT EXISTS idx_events_date ON events(event_date);
CREATE INDEX IF NOT EXISTS idx_projects_active ON projects(is_active);
CREATE INDEX IF NOT EXISTS idx_projects_status ON projects(status);
CREATE INDEX IF NOT EXISTS idx_blogs_published ON blogs(published);
CREATE INDEX IF NOT EXISTS idx_library_active ON library(is_active);
CREATE INDEX IF NOT EXISTS idx_gallery_active ON gallery(is_active);
CREATE INDEX IF NOT EXISTS idx_membership_status ON membership(status);
CREATE INDEX IF NOT EXISTS idx_donations_status ON donations(status);
CREATE INDEX IF NOT EXISTS idx_event_registrations_status ON event_registrations(status);
CREATE INDEX IF NOT EXISTS idx_faqs_page_id ON faqs(page_id);

-- =====================================================
-- STORAGE POLICIES (Run these in Supabase Dashboard)
-- =====================================================
--
-- In Supabase Dashboard > Storage > Policies, set these policies:
--
-- 1. For 'hero-images' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 2. For 'event-images' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 3. For 'project-images' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 4. For 'blog-images' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 5. For 'gallery' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 6. For 'library' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 7. For 'certificates' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - UPDATE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.role() = 'authenticated' AND auth.jwt() ->> 'role' = 'admin'
--
-- 8. For 'user-documents' bucket:
--    - SELECT: auth.uid() = owner OR auth.jwt() ->> 'role' = 'admin'
--    - INSERT: auth.role() = 'authenticated'
--    - UPDATE: auth.uid() = owner OR auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.uid() = owner OR auth.jwt() ->> 'role' = 'admin'
--
-- 9. For 'avatars' bucket:
--    - SELECT: true (public read)
--    - INSERT: auth.role() = 'authenticated'
--    - UPDATE: auth.uid() = owner OR auth.jwt() ->> 'role' = 'admin'
--    - DELETE: auth.uid() = owner OR auth.jwt() ->> 'role' = 'admin'
--
-- 10. For 'temp' bucket:
--     - SELECT: auth.role() = 'authenticated'
--     - INSERT: auth.role() = 'authenticated'
--     - UPDATE: auth.role() = 'authenticated'
--     - DELETE: auth.role() = 'authenticated'

-- =====================================================
-- SAMPLE DATA INSERTION (Optional)
-- =====================================================

-- Insert default settings
INSERT INTO settings (key, value, description) VALUES
('site_name', 'SDB Nepal', 'The name of the organization'),
('currency', 'NPR', 'Default currency for transactions'),
('max_file_size', '10485760', 'Maximum file upload size in bytes (10MB)'),
('allowed_file_types', 'image/*,video/*,audio/*,application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'Allowed file types for uploads'),
('storage_quota', '1073741824', 'Storage quota in bytes (1GB)')
ON CONFLICT (key) DO NOTHING;

-- =====================================================
-- HELPER FUNCTIONS
-- =====================================================

-- Function to get file URL from storage path
CREATE OR REPLACE FUNCTION get_file_url(bucket_name text, file_path text)
RETURNS text AS $$
BEGIN
    RETURN 'https://' || current_setting('app.supabase_url') || '/storage/v1/object/public/' || bucket_name || '/' || file_path;
END;
$$ LANGUAGE plpgsql;

-- Function to get thumbnail URL for media files
CREATE OR REPLACE FUNCTION get_thumbnail_url(file_id uuid)
RETURNS text AS $$
DECLARE
    file_record record;
BEGIN
    SELECT mf.*, fu.entity_type, fu.entity_id
    FROM media_files mf
    LEFT JOIN file_usage fu ON mf.id = fu.file_id
    WHERE mf.id = file_id
    INTO file_record;
    
    IF file_record.thumbnail_path IS NOT NULL THEN
        RETURN get_file_url(file_record.bucket_name, file_record.thumbnail_path);
    ELSE
        RETURN get_file_url(file_record.bucket_name, file_record.file_path);
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Function to update file usage count
CREATE OR REPLACE FUNCTION update_file_usage_count()
RETURNS trigger AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        -- Increment usage count
        UPDATE media_files 
        SET updated_at = now() 
        WHERE id = NEW.file_id;
    ELSIF TG_OP = 'DELETE' THEN
        -- Decrement usage count
        UPDATE media_files 
        SET updated_at = now() 
        WHERE id = OLD.file_id;
    END IF;
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Create trigger for file usage updates
CREATE TRIGGER file_usage_trigger
    AFTER INSERT OR DELETE ON file_usage
    FOR EACH ROW
    EXECUTE FUNCTION update_file_usage_count();

-- =====================================================
-- COMPLETION MESSAGE
-- =====================================================

-- This script creates a complete database structure for SDB Nepal
-- with support for direct file uploads to Supabase Storage.
-- 
-- Next steps:
-- 1. Create storage buckets in Supabase Dashboard
-- 2. Set storage policies for security
-- 3. Update your application code to use the new file upload system
-- 4. Test file uploads and management